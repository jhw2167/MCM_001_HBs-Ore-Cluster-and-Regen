Biome Support Implementation Plan

Create a custom type as a subclass in OreClusterJsonConfig called OreClusterId
	- state - one int state which represents 3 Digit numeric
	- constructor - level string, biome string and ore block string into a single UUID
	- method getId(ResourceName level, ResourceName biome , resourceName blockName)

	private Map<BlockState, OreClusterConfigModel> oreConfigs will have to be changed to
	Map<OreClusterId, OreClusterConfigModel> oreConfigs

	Please use the utility method from HBUtil.HBMath.getUUID() to generate UUIDs
	
Implementation Steps:
	we have to aggregate the level string, biome string, ore block string into a single UUID then map to a 3 digit numeric.

1. Config Changes Needed:
- Add biome identifier field to OreClusterConfigModel
- Add biome validation in OreClusterConfig
- Update JSON config format to include biome specifications

2. Core Logic Updates:
- Modify OreClusterCalculator to factor in biome during cluster generation
- Update OreClusterManager to track clusters by biome
- Add biome checks to OreClusterBlockStateTracker

3. UUID Generation:

	we have to aggregate the level string, biome string, ore block string into a single UUID then map to a 3 digit numeric.

Migration Strategy:
1. Implement backward compatibility layer
2. Add conversion utility for existing configurations
3. Update existing cluster tracking to new UUID format
4. Add migration documentation for server admins

Technical Considerations:
- Maintain backwards compatibility with existing worlds
- Add biome caching to improve performance
- Consider config versioning system
